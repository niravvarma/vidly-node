ObjectId -- Uniquely identifies any document. 

_id consits of 12 bytes
- 4 bytes: timestamp
- 3 bytes: machine identifier
- 2 bytes: process identifier
- 3 bytes: counter

1 byte = 8 bits ( 1 bit can be 0 or 1)
2 ^ 8 = 256 numbers can be stored in 1 byte
how many numbers can be stored in 3 bytes? 2 ^ (8*3) = 16 Million

ID is almost unique as it may be possible that
id is generated same only if 2 or more documents are saved at same timestamp on same machine and same processor.
and thus, counter may be set to same but there can be 16 million numbers that can be stored in 3 bytes as calculated above.
-- It is generated by MongDB driver which talks to MongoDB
-- Driver itself can generate identifier by itself, not MongoDB
-- new object created using mongoose generates unique id which talks to MongoDB

// thus, we do the following
// note, as timestamp is already present we can sort any document using timestamp in the id itself
const mongoose = require('mongoose');
const id = new mongoose.Types.ObjectId();
console.log(id); //generates id
console.log(id.getTimestamp()); //generates timestamp
mongoose.Types.ObjectId.isValid('1234'); // false

